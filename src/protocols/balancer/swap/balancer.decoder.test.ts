/* eslint-disable max-len */
import { BigNumber } from "ethers";
import { TransactionRaw } from "../../../core/transaction-raw";
import { decodeBalancer as decodeBalancer_ } from "./balancer.decoder";

function decodeBalancer(tx: TransactionRaw) {
    return decodeBalancer_('0xBA12222222228d8Ba445958a75a0704d566BF2C8', tx);
}

describe('Balancer swap test', () => {
    it('Swap exact native to custom', () => {
        const tx: TransactionRaw = {
            data: '0x52bbbe2900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e797b975b99a20d539786e5c4a32218a3d6d80e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e797b975b99a20d539786e5c4a32218a3d6d80e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000246faad78a497720ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6a5032dc4bf638e15b4a66bc718ba7ba474ff73000200000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000',
            from: '0x6e797B975B99a20d539786e5c4a32218a3d6d80E',
            to: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',
            gasLimit: BigNumber.from('0x2c137'),
            gasPrice: BigNumber.from('0x163F29F8A1'),
            value: '30000000000000000'
        };

        const result = decodeBalancer(tx);
        expect(result.tag).toEqual('Success');
        expect((result as any).tx.payload.dstTokenAddress).toEqual('0x6B175474E89094C44Da98b954EedeAC495271d0F');
    });


    

    it('Swap native to exact custom', () => {
        const tx: TransactionRaw = {
            data: '0x52bbbe2900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006e797b975b99a20d539786e5c4a32218a3d6d80e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e797b975b99a20d539786e5c4a32218a3d6d80e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098a7d9b8314c0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01abc00e86c7e258823b9a055fd62ca6cf61a16300010000000000000000003b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f98400000000000000000000000000000000000000000000000098a7d9b8314c000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000',
            from: '0x6e797B975B99a20d539786e5c4a32218a3d6d80E',
            to: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',
            gasLimit: BigNumber.from('0x2c137'),
            gasPrice: BigNumber.from('0x163F29F8A1'),
            value: '30000000000000000'
        };

        const result = decodeBalancer(tx);
        expect(result.tag).toEqual('Success');
        expect((result as any).tx.payload.dstTokenAddress).toEqual('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984');
    });
});