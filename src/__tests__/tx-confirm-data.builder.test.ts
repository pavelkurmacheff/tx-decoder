import {BlockchainRpcCaller, Transaction} from '../model/common.model';
import {TxConfirmDataBuilder} from '../tx-confirm-data.builder';
import {TOKENS_MOCK} from './mocks/tokens.mock';
import {TOKEN_PRICES_MOCK} from './mocks/token-prices.mock';
import {BigNumber} from '@ethersproject/bignumber';

describe('Builder of transaction data for confirmation', () => {
    let txUiItemsBuilder: TxConfirmDataBuilder;
    let rpcCaller: BlockchainRpcCaller;
    let rpcCallerMock: jest.Mock;

    beforeEach(() => {
        rpcCallerMock = jest.fn();
        rpcCaller = {
            call: rpcCallerMock
        };
        txUiItemsBuilder = new TxConfirmDataBuilder({
            tokens: TOKENS_MOCK,
            tokenPrices: TOKEN_PRICES_MOCK
        }, rpcCaller);
    });

    // https://etherscan.io/tx/0xbd44b75afac45ef81af448c47b40d32ac705fe2d0354b39097f5ebfd62046ffe
    it('Approve transaction', async () => {
        const txConfig: Transaction = {
            nonce: 383,
            gasPrice: '0x1da4f97c6e',
            gasLimit: '0x011150',
            from: '0x3b608c5243732903152e38f1dab1056a4a79b980',
            to: '0x4fabb145d64652a948d72533023f6e7a623c7c53',
            value: '0x00',
            data: '0x095ea7b30000000000000000000000001111111254fb6c44bac0bed2854e76f90643097dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
        };

        const {items, txType} = await txUiItemsBuilder.buildItemsForTx(txConfig);

        expect(txType).toBe('approve');
        expect(items).toMatchSnapshot();
    });

    // https://etherscan.io/tx/0x698156119b255c33347bf844a0245dafdc39e871f3825ae5c24cc0019be748ed
    it('Swap transaction: swap()', async () => {
        const dstAmount = BigNumber.from('114241200360986751251430').toHexString();
        const txConfig: Transaction = {
            nonce: 194,
            gasPrice: '0x1b7b430f2c',
            gasLimit: '0x091d06',
            from: '0x64741d0b9e376d75873c12e1b0cdccc26c3bcb04',
            to: '0x1111111254fb6c44bac0bed2854e76f90643097d',
            value: '0x00',
            data: '0x7c025200000000000000000000000000220bda5c8994804ac96ebe4df184d25e5c2196d400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000853d955acef822db058eb8505911ed77f175b99e000000000000000000000000220bda5c8994804ac96ebe4df184d25e5c2196d400000000000000000000000064741d0b9e376d75873c12e1b0cdccc26c3bcb040000000000000000000000000000000000000000000000000000001aa580321900000000000000000000000000000000000000000000181b5805bbc9ae4bb3e600000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004eeb5625d9000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000d632f22692fac7611d2aa1c0d552930d43caed3b0000000000000000000000000000000000000000000000000000001aa580321900000000000000000000000000000000000000000000000000000000800000000000000000000000d632f22692fac7611d2aa1c0d552930d43caed3b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000084a6417ed6000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001aa5803219000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018414284aab00000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000853d955acef822db058eb8505911ed77f175b99e00000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064d1660f99000000000000000000000000853d955acef822db058eb8505911ed77f175b99e0000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e26b9977'
        };

        rpcCallerMock.mockImplementation((method, params) => {
            if (method === 'eth_call' && params[0].data === txConfig.data) {
                return Promise.resolve(dstAmount);
            }

            return Promise.resolve('0x');
        });

        const {items, txType} = await txUiItemsBuilder.buildItemsForTx(txConfig);

        expect(txType).toBe('swap');
        expect(items).toMatchSnapshot();
    });

    // https://etherscan.io/tx/0xd0de097ca15040e588f8528162c01f5cad29fd7ea2168b2a503bc3633a4e8a6b
    it('Swap transaction: clipperSwap()', async () => {
        const dstAmount = BigNumber.from('459483882860783').toHexString();
        const txConfig: Transaction = {
            nonce: 380,
            gasPrice: '0x1eb1f3ba45',
            gasLimit: '0x02c6a2',
            from: '0x3b608c5243732903152e38f1dab1056a4a79b980',
            to: '0x1111111254fb6c44bac0bed2854e76f90643097d',
            value: '0x00',
            data: '0xb04311820000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000018227176f419ee26b9977'
        };

        rpcCallerMock.mockImplementation((method, params) => {
            if (method === 'eth_call' && params[0].data === txConfig.data) {
                return Promise.resolve(dstAmount);
            }

            return Promise.resolve('0x');
        });

        const {items, txType} = await txUiItemsBuilder.buildItemsForTx(txConfig);

        expect(txType).toBe('swap');
        expect(items).toMatchSnapshot();
    });

    // https://etherscan.io/tx/0x027dbf1121f509031eba135ef03a17f18bfa7195c035c73db4cfc94b55df522e
    it('Swap transaction: clipperSwapWithPermit()', async () => {
        const dstAmount = BigNumber.from('425128486899692').toHexString();
        const txConfig: Transaction = {
            nonce: 379,
            gasPrice: '0x1ce84f82b4',
            gasLimit: '0x04191b',
            from: '0x3b608c5243732903152e38f1dab1056a4a79b980',
            to: '0x1111111254fb6c44bac0bed2854e76f90643097d',
            value: '0x00',
            data: '0xd6a92a5d0000000000000000000000003b608c5243732903152e38f1dab1056a4a79b980000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000018243f4d027f800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000003b608c5243732903152e38f1dab1056a4a79b9800000000000000000000000001111111254fb6c44bac0bed2854e76f90643097dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000618d1d77000000000000000000000000000000000000000000000000000000000000001b8576a8af192b84d1e122d82eeddeb2fd0b006381926590f471fd23247aeeeb09010cad06bbbf7aa344d311a13ed14419a913f2015c88600dbbd579b180bf6d36e26b9977'
        };

        rpcCallerMock.mockImplementation((method, params) => {
            if (method === 'eth_call' && params[0].data === txConfig.data) {
                return Promise.resolve(dstAmount);
            }

            return Promise.resolve('0x');
        });

        const {items, txType} = await txUiItemsBuilder.buildItemsForTx(txConfig);

        expect(txType).toBe('swap');
        expect(items).toMatchSnapshot();
    });
});
